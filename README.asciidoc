:blank: pass:[ +]
Description
-----------
A simple one-header file that does exactly as the name suggests: handles help argument reading and output, which would otherwise be inadequately done boilerplate code - there are various popular projects where simply trying to get usage help is a roll of the dice as to what argument works (nano doesn't support "help", openssl and gcc _only_ support "help" and "--help" respectively, Python only supports "--version", etc.), and are usually not case insensitive which is not user friendly. Newer programs are better in this regard, but why reinvent the wheel? It's two functions!
{blank}

Requirements
------------
##### Operating System
- Windows
- macOS [small]#(Tested ^Yosemite^)#
- Linux [small]#(Tested ^Fedora-31^)#
- BSD

##### Compiler
- Python - 2.xx through 3.xx
- CPP - C++11
- C - C99
{blank}

Example
-------
##### C
[source,C]
-----------------
help_handler(argc, argv, "Usage: Test\n", "Unknown argument given\n");
help_handler(argc, argv, "Usage: Test\n", NULL);
-----------------
##### C++ (Last argument is optional)
[source,CPP]
-----------------
helpHandler(argc, argv, "Usage: Test\n", "Unknown argument given\n");
helpHandler(argc, argv, "Usage: Test\n");
-----------------
##### Python
[source,Python]
-----------------
help_handler("Usage: Test", "Unknown argument given");
help_handler("Usage: Test")
-----------------
{blank}


You may also define a _version_ for your program:
[source,C]
----------
help_handler_ver("1.5.9")
----------
and whether or not to output help if no arguments are given, an unknown argument is given, to match strings which may conflict with your program (h, -h, --h, v, -v, --v), and a version for convenience if needed. The function is defined as such:
[source,C]
----------
help_handler_config(int noArgumentHelp, int unknownArgumentHelp, int extraStrings, "Version string")
----------
{blank}
{blank}

image:https://www.dropbox.com/s/n4a97cwkfu8fwy6/5b0e12e163303c16501e4f31aa4b63cf56c6e604.png?raw=1[alt="example terminal screenshot"]